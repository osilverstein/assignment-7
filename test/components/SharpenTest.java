package components;

import org.junit.Before;
import org.junit.Test;

import model.ImageProcessorModel;
import model.Kernel;
import model.Matrix;
import model.filter.Filter;
import model.filter.Sharpen;
import model.pixel.Pixel;
import utilities.ImageUtil;

import static org.junit.Assert.assertEquals;

/**
 * test class for the Sharpen class.
 */
public class SharpenTest {

  ImageProcessorModel m;
  Filter f;
  Pixel p;
  Matrix k;
  Pixel[][] pixels;

  @Before
  public void setUp() {
    m = ImageUtil.readPPM("src/images/Koala.ppm");
    f = new Sharpen();
    p = m.getPixel(0,0);
    k = new Kernel(5, 5).setSlots(
            -0.125, -0.125, -0.125, -0.125, -0.125,
            -0.125, 0.25, 0.25, 0.25, -0.125,
            -0.125, 0.25, 1.00, 0.25, -0.125,
            -0.125, 0.25, 0.25, 0.25, -0.125,
            -0.125, -0.125, -0.125, -0.125, -0.125);

    pixels = new Pixel[m.getHeight()][m.getWidth()];
    for (int row = 0; row < m.getHeight(); row++) {
      for (int col = 0; col < m.getWidth(); col++) {
        pixels[row][col] = m.getPixel(row, col);
      }
    }
  }

  // Tests sharpening a pixel in the corner of the image (ignores grid points of the image).
  @Test
  public void testSharpenInCorner() {
    Pixel newPixel = f.evaluateFilter(pixels, 0, 0);

    double zeroZeroTallyGreen = (m.getPixel(0,0).getColorChannels()[1] * 1);
    double zeroZeroTallyBlue = (m.getPixel(0,0).getColorChannels()[2] * 1);

    double zeroOneTallyGreen = (m.getPixel(0,1).getColorChannels()[1] * 0.25);
    double zeroOneTallyBlue = (m.getPixel(0,1).getColorChannels()[2] * 0.25);

    double zeroTwoTallyGreen = (m.getPixel(0,2).getColorChannels()[1] * -0.125);
    double zeroTwoTallyBlue = (m.getPixel(0,2).getColorChannels()[2] * -0.125);

    double oneZeroTallyGreen = (m.getPixel(1,0).getColorChannels()[1] * 0.25);
    double oneZeroTallyBlue = (m.getPixel(1,0).getColorChannels()[2] * 0.25);

    double oneOneTallyGreen = (m.getPixel(1,1).getColorChannels()[1] * 0.25);
    double oneOneTallyBlue = (m.getPixel(1,1).getColorChannels()[2] * 0.25);

    double oneTwoTallyGreen = (m.getPixel(1,2).getColorChannels()[1] * -0.125);
    double oneTwoTallyBlue = (m.getPixel(1,2).getColorChannels()[2] * -0.125);

    double twoZeroTallyGreen = (m.getPixel(2,0).getColorChannels()[1] * -0.125);
    double twoZeroTallyBlue = (m.getPixel(2,0).getColorChannels()[2] * -0.125);

    double twoOneTallyGreen = (m.getPixel(2,1).getColorChannels()[1] * -0.125);
    double twoOneTallyBlue = (m.getPixel(2,1).getColorChannels()[2] * -0.125);

    double twoTwoTallyGreen = (m.getPixel(2,2).getColorChannels()[1] * -0.125);
    double twoTwoTallyBlue = (m.getPixel(2,2).getColorChannels()[2] * -0.125);

    double green = zeroZeroTallyGreen
            + zeroOneTallyGreen
            + zeroTwoTallyGreen
            + oneZeroTallyGreen
            + oneOneTallyGreen
            + oneTwoTallyGreen
            + twoZeroTallyGreen
            + twoOneTallyGreen
            + twoTwoTallyGreen;
    double blue = zeroZeroTallyBlue
            + zeroOneTallyBlue
            + zeroTwoTallyBlue
            + oneZeroTallyBlue
            + oneOneTallyBlue
            + oneTwoTallyBlue
            + twoZeroTallyBlue
            + twoOneTallyBlue
            + twoTwoTallyBlue;

    assertEquals(255, newPixel.getColorChannels()[0]);
    assertEquals((int)green, newPixel.getColorChannels()[1]);
    assertEquals((int)blue, newPixel.getColorChannels()[2]);
  }

  // Tests sharpening a pixel in the middle of the image.
  @Test
  public void testSharpenInMiddle() {
    Pixel newPixel = f.evaluateFilter(pixels, 100, 100);

    double negTwoNegTwoTallyRed = (m.getPixel(98,98).getColorChannels()[0] * -0.125);
    double negTwoNegTwoTallyGreen = (m.getPixel(98,98).getColorChannels()[1] * -0.125);
    double negTwoNegTwoTallyBlue = (m.getPixel(98,98).getColorChannels()[2] * -0.125);

    double negTwoNegOneTallyRed = (m.getPixel(98,99).getColorChannels()[0] * -0.125);
    double negTwoNegOneTallyGreen = (m.getPixel(98,99).getColorChannels()[1] * -0.125);
    double negTwoNegOneTallyBlue = (m.getPixel(98,99).getColorChannels()[2] * -0.125);

    double negTwoZeroTallyRed = (m.getPixel(98,100).getColorChannels()[0] * -0.125);
    double negTwoZeroTallyGreen = (m.getPixel(98,100).getColorChannels()[1] * -0.125);
    double negTwoZeroTallyBlue = (m.getPixel(98,100).getColorChannels()[2] * -0.125);

    double negTwoOneTallyRed = (m.getPixel(98,101).getColorChannels()[0] * -0.125);
    double negTwoOneTallyGreen = (m.getPixel(98,101).getColorChannels()[1] * -0.125);
    double negTwoOneTallyBlue = (m.getPixel(98,101).getColorChannels()[2] * -0.125);

    double negTwoTwoTallyRed = (m.getPixel(98,102).getColorChannels()[0] * -0.125);
    double negTwoTwoTallyGreen = (m.getPixel(98,102).getColorChannels()[1] * -0.125);
    double negTwoTwoTallyBlue = (m.getPixel(98,102).getColorChannels()[2] * -0.125);

    double negOneNegTwoTallyRed = (m.getPixel(99,98).getColorChannels()[0] * -0.125);
    double negOneNegTwoTallyGreen = (m.getPixel(99,98).getColorChannels()[1] * -0.125);
    double negOneNegTwoTallyBlue = (m.getPixel(99,98).getColorChannels()[2] * -0.125);

    double negOneNegOneTallyRed = (m.getPixel(99,99).getColorChannels()[0] * 0.25);
    double negOneNegOneTallyGreen = (m.getPixel(99,99).getColorChannels()[1] * 0.25);
    double negOneNegOneTallyBlue = (m.getPixel(99,99).getColorChannels()[2] * 0.25);

    double negOneZeroTallyRed = (m.getPixel(99,100).getColorChannels()[0] * 0.25);
    double negOneZeroTallyGreen = (m.getPixel(99,100).getColorChannels()[1] * 0.25);
    double negOneZeroTallyBlue = (m.getPixel(99,100).getColorChannels()[2] * 0.25);

    double negOneOneTallyRed = (m.getPixel(99,101).getColorChannels()[0] * 0.25);
    double negOneOneTallyGreen = (m.getPixel(99,101).getColorChannels()[1] * 0.25);
    double negOneOneTallyBlue = (m.getPixel(99,101).getColorChannels()[2] * 0.25);

    double negOneTwoTallyRed = (m.getPixel(99,102).getColorChannels()[0] * -0.125);
    double negOneTwoTallyGreen = (m.getPixel(99,102).getColorChannels()[1] * -0.125);
    double negOneTwoTallyBlue = (m.getPixel(99,102).getColorChannels()[2] * -0.125);

    double zeroNegTwoTallyRed = (m.getPixel(100,98).getColorChannels()[0] * -0.125);
    double zeroNegTwoTallyGreen = (m.getPixel(100,98).getColorChannels()[1] * -0.125);
    double zeroNegTwoTallyBlue = (m.getPixel(100,98).getColorChannels()[2] * -0.125);

    double zeroNegOneTallyRed = (m.getPixel(100,99).getColorChannels()[0] * 0.25);
    double zeroNegOneTallyGreen = (m.getPixel(100,99).getColorChannels()[1] * 0.25);
    double zeroNegOneTallyBlue = (m.getPixel(100,99).getColorChannels()[2] * 0.25);

    double zeroZeroTallyRed = (m.getPixel(100,100).getColorChannels()[0] * 1.00);
    double zeroZeroTallyGreen = (m.getPixel(100,100).getColorChannels()[1] * 1.00);
    double zeroZeroTallyBlue = (m.getPixel(100,100).getColorChannels()[2] * 1.00);

    double zeroOneTallyRed = (m.getPixel(100,101).getColorChannels()[0] * 0.25);
    double zeroOneTallyGreen = (m.getPixel(100,101).getColorChannels()[1] * 0.25);
    double zeroOneTallyBlue = (m.getPixel(100,101).getColorChannels()[2] * 0.25);

    double zeroTwoTallyRed = (m.getPixel(100,102).getColorChannels()[0] * -0.125);
    double zeroTwoTallyGreen = (m.getPixel(100,102).getColorChannels()[1] * -0.125);
    double zeroTwoTallyBlue = (m.getPixel(100,102).getColorChannels()[2] * -0.125);

    double oneNegTwoTallyRed = (m.getPixel(101,98).getColorChannels()[0] * -0.125);
    double oneNegTwoTallyGreen = (m.getPixel(101,98).getColorChannels()[1] * -0.125);
    double oneNegTwoTallyBlue = (m.getPixel(101,98).getColorChannels()[2] * -0.125);

    double oneNegOneTallyRed = (m.getPixel(101,99).getColorChannels()[0] * 0.25);
    double oneNegOneTallyGreen = (m.getPixel(101,99).getColorChannels()[1] * 0.25);
    double oneNegOneTallyBlue = (m.getPixel(101,99).getColorChannels()[2] * 0.25);

    double oneZeroTallyRed = (m.getPixel(101,100).getColorChannels()[0] * 0.25);
    double oneZeroTallyGreen = (m.getPixel(101,100).getColorChannels()[1] * 0.25);
    double oneZeroTallyBlue = (m.getPixel(101,100).getColorChannels()[2] * 0.25);

    double oneOneTallyRed = (m.getPixel(101,101).getColorChannels()[0] * 0.25);
    double oneOneTallyGreen = (m.getPixel(101,101).getColorChannels()[1] * 0.25);
    double oneOneTallyBlue = (m.getPixel(101,101).getColorChannels()[2] * 0.25);

    double oneTwoTallyRed = (m.getPixel(101,102).getColorChannels()[0] * -0.125);
    double oneTwoTallyGreen = (m.getPixel(101,102).getColorChannels()[1] * -0.125);
    double oneTwoTallyBlue = (m.getPixel(101,102).getColorChannels()[2] * -0.125);

    double twoNegTwoTallyRed = (m.getPixel(102,98).getColorChannels()[0] * -0.125);
    double twoNegTwoTallyGreen = (m.getPixel(102,98).getColorChannels()[1] * -0.125);
    double twoNegTwoTallyBlue = (m.getPixel(102,98).getColorChannels()[2] * -0.125);

    double twoNegOneTallyRed = (m.getPixel(102,99).getColorChannels()[0] * -0.125);
    double twoNegOneTallyGreen = (m.getPixel(102,99).getColorChannels()[1] * -0.125);
    double twoNegOneTallyBlue = (m.getPixel(102,99).getColorChannels()[2] * -0.125);

    double twoZeroTallyRed = (m.getPixel(102,100).getColorChannels()[0] * -0.125);
    double twoZeroTallyGreen = (m.getPixel(102,100).getColorChannels()[1] * -0.125);
    double twoZeroTallyBlue = (m.getPixel(102,100).getColorChannels()[2] * -0.125);

    double twoOneTallyRed = (m.getPixel(102,101).getColorChannels()[0] * -0.125);
    double twoOneTallyGreen = (m.getPixel(102,101).getColorChannels()[1] * -0.125);
    double twoOneTallyBlue = (m.getPixel(102,101).getColorChannels()[2] * -0.125);

    double twoTwoTallyRed = (m.getPixel(102,102).getColorChannels()[0] * -0.125);
    double twoTwoTallyGreen = (m.getPixel(102,102).getColorChannels()[1] * -0.125);
    double twoTwoTallyBlue = (m.getPixel(102,102).getColorChannels()[2] * -0.125);

    double red = negTwoNegTwoTallyRed
            + negTwoNegOneTallyRed
            + negTwoZeroTallyRed
            + negTwoOneTallyRed
            + negTwoTwoTallyRed
            + negOneNegTwoTallyRed
            + negOneNegOneTallyRed
            + negOneZeroTallyRed
            + negOneOneTallyRed
            + negOneTwoTallyRed
            + zeroNegTwoTallyRed
            + zeroNegOneTallyRed
            + zeroZeroTallyRed
            + zeroOneTallyRed
            + zeroTwoTallyRed
            + oneNegTwoTallyRed
            + oneNegOneTallyRed
            + oneZeroTallyRed
            + oneOneTallyRed
            + oneTwoTallyRed
            + twoNegTwoTallyRed
            + twoNegOneTallyRed
            + twoZeroTallyRed
            + twoOneTallyRed
            + twoTwoTallyRed;
    double green = negTwoNegTwoTallyGreen
            + negTwoNegOneTallyGreen
            + negTwoZeroTallyGreen
            + negTwoOneTallyGreen
            + negTwoTwoTallyGreen
            + negOneNegTwoTallyGreen
            + negOneNegOneTallyGreen
            + negOneZeroTallyGreen
            + negOneOneTallyGreen
            + negOneTwoTallyGreen
            + zeroNegTwoTallyGreen
            + zeroNegOneTallyGreen
            + zeroZeroTallyGreen
            + zeroOneTallyGreen
            + zeroTwoTallyGreen
            + oneNegTwoTallyGreen
            + oneNegOneTallyGreen
            + oneZeroTallyGreen
            + oneOneTallyGreen
            + oneTwoTallyGreen
            + twoNegTwoTallyGreen
            + twoNegOneTallyGreen
            + twoZeroTallyGreen
            + twoOneTallyGreen
            + twoTwoTallyGreen;
    double blue = negTwoNegTwoTallyBlue
            + negTwoNegOneTallyBlue
            + negTwoZeroTallyBlue
            + negTwoOneTallyBlue
            + negTwoTwoTallyBlue
            + negOneNegTwoTallyBlue
            + negOneNegOneTallyBlue
            + negOneZeroTallyBlue
            + negOneOneTallyBlue
            + negOneTwoTallyBlue
            + zeroNegTwoTallyBlue
            + zeroNegOneTallyBlue
            + zeroZeroTallyBlue
            + zeroOneTallyBlue
            + zeroTwoTallyBlue
            + oneNegTwoTallyBlue
            + oneNegOneTallyBlue
            + oneZeroTallyBlue
            + oneOneTallyBlue
            + oneTwoTallyBlue
            + twoNegTwoTallyBlue
            + twoNegOneTallyBlue
            + twoZeroTallyBlue
            + twoOneTallyBlue
            + twoTwoTallyBlue;

    assertEquals((int)red, newPixel.getColorChannels()[0]);
    assertEquals((int)green, newPixel.getColorChannels()[1]);
    assertEquals((int)blue, newPixel.getColorChannels()[2]);
  }

  // Tests sharpening a pixel on the edge of the image (ignores grid points of the image).
  @Test
  public void testSharpenOnEdge() {
    Pixel newPixel = f.evaluateFilter(pixels, 0, 2);

    double zeroNegTwoTallyGreen = (m.getPixel(0,0).getColorChannels()[1] * -0.125);
    double zeroNegTwoTallyBlue = (m.getPixel(0,0).getColorChannels()[2] * -0.125);

    double zeroNegOneTallyGreen = (m.getPixel(0,1).getColorChannels()[1] * 0.25);
    double zeroNegOneTallyBlue = (m.getPixel(0,1).getColorChannels()[2] * 0.25);

    double zeroZeroTallyGreen = (m.getPixel(0,2).getColorChannels()[1] * 1.00);
    double zeroZeroTallyBlue = (m.getPixel(0,2).getColorChannels()[2] * 1.00);

    double zeroOneTallyGreen = (m.getPixel(0,3).getColorChannels()[1] * 0.25);
    double zeroOneTallyBlue = (m.getPixel(0,3).getColorChannels()[2] * 0.25);

    double zeroTwoTallyGreen = (m.getPixel(0,4).getColorChannels()[1] * -0.125);
    double zeroTwoTallyBlue = (m.getPixel(0,4).getColorChannels()[2] * -0.125);

    double oneNegTwoTallyGreen = (m.getPixel(1,0).getColorChannels()[1] * -0.125);
    double oneNegTwoTallyBlue = (m.getPixel(1,0).getColorChannels()[2] * -0.125);

    double oneNegOneTallyGreen = (m.getPixel(1,1).getColorChannels()[1] * 0.25);
    double oneNegOneTallyBlue = (m.getPixel(1,1).getColorChannels()[2] * 0.25);

    double oneZeroTallyGreen = (m.getPixel(1,2).getColorChannels()[1] * 0.25);
    double oneZeroTallyBlue = (m.getPixel(1,2).getColorChannels()[2] * 0.25);

    double oneOneTallyGreen = (m.getPixel(1,3).getColorChannels()[1] * 0.25);
    double oneOneTallyBlue = (m.getPixel(1,3).getColorChannels()[2] * 0.25);

    double oneTwoTallyGreen = (m.getPixel(1,4).getColorChannels()[1] * -0.125);
    double oneTwoTallyBlue = (m.getPixel(1,4).getColorChannels()[2] * -0.125);

    double twoNegTwoTallyGreen = (m.getPixel(2,0).getColorChannels()[1] * -0.125);
    double twoNegTwoTallyBlue = (m.getPixel(2,0).getColorChannels()[2] * -0.125);

    double twoNegOneTallyGreen = (m.getPixel(2,1).getColorChannels()[1] * -0.125);
    double twoNegOneTallyBlue = (m.getPixel(2,1).getColorChannels()[2] * -0.125);

    double twoZeroTallyGreen = (m.getPixel(2,2).getColorChannels()[1] * -0.125);
    double twoZeroTallyBlue = (m.getPixel(2,2).getColorChannels()[2] * -0.125);

    double twoOneTallyGreen = (m.getPixel(2,3).getColorChannels()[1] * -0.125);
    double twoOneTallyBlue = (m.getPixel(2,3).getColorChannels()[2] * -0.125);

    double twoTwoTallyGreen = (m.getPixel(2,4).getColorChannels()[1] * -0.125);
    double twoTwoTallyBlue = (m.getPixel(2,4).getColorChannels()[2] * -0.125);

    double green = zeroNegTwoTallyGreen
            + zeroNegOneTallyGreen
            + zeroZeroTallyGreen
            + zeroOneTallyGreen
            + zeroTwoTallyGreen
            + oneNegTwoTallyGreen
            + oneNegOneTallyGreen
            + oneZeroTallyGreen
            + oneOneTallyGreen
            + oneTwoTallyGreen
            + twoNegTwoTallyGreen
            + twoNegOneTallyGreen
            + twoZeroTallyGreen
            + twoOneTallyGreen
            + twoTwoTallyGreen;
    double blue = zeroNegTwoTallyBlue
            + zeroNegOneTallyBlue
            + zeroZeroTallyBlue
            + zeroOneTallyBlue
            + zeroTwoTallyBlue
            + oneNegTwoTallyBlue
            + oneNegOneTallyBlue
            + oneZeroTallyBlue
            + oneOneTallyBlue
            + oneTwoTallyBlue
            + twoNegTwoTallyBlue
            + twoNegOneTallyBlue
            + twoZeroTallyBlue
            + twoOneTallyBlue
            + twoTwoTallyBlue;

    assertEquals(255, newPixel.getColorChannels()[0]);
    assertEquals((int)green, newPixel.getColorChannels()[1]);
    assertEquals((int)blue, newPixel.getColorChannels()[2]);
  }

}